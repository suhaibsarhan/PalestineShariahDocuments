using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[ApiController]
[Route("api/[controller]")]
public class DocumentsController : ControllerBase
{
    private readonly ApplicationDbContext _context;

    public DocumentsController(ApplicationDbContext context)
    {
        _context = context;
    }

    // GET: api/documents
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Document>>> GetDocuments()
    {
        var documents = await _context.Documents
            .Include(d => d.Parties)
            .ToListAsync();

        var result = documents.Select(d => new 
        {
            d.DocumentID,
            d.Type,
            d.Status,
            d.IssueDate
        }).ToList();

        return Ok(result);
    }

    // GET: api/documents/5
    [HttpGet("{id}")]
    public async Task<ActionResult<Document>> GetDocument(int id)
    {
        var document = await _context.Documents
            .Include(d => d.Parties)
            .FirstOrDefaultAsync(d => d.DocumentID == id);

        if (document == null)
        {
            return NotFound();
        }

        return document;
    }

    // POST: api/documents
    [HttpPost]
    public async Task<ActionResult<Document>> PostDocument(Document document)
    {
        _context.Documents.Add(document);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetDocument), new { id = document.DocumentID }, document);
    }

    // PUT: api/documents/5
    [HttpPut("{id}")]
    public async Task<IActionResult> PutDocument(int id, Document document)
    {
        if (id != document.DocumentID)
        {
            return BadRequest();
        }

        _context.Entry(document).State = EntityState.Modified;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!_DocumentExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
    }

    // DELETE: api/documents/5
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteDocument(int id)
    {
        var document = await _context.Documents.FindAsync(id);
        if (document == null)
        {
            return NotFound();
        }

        _context.Documents.Remove(document);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    private bool _DocumentExists(int id)
    {
        return _context.Documents.Any(e => e.DocumentID == id);
    }
}